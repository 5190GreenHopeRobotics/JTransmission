package net.viperfish.propertyManager.controller;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import net.viperfish.propertyManager.service.TenantService;
import net.viperfish.propertyManager.tenant.Tenant;
import net.viperfish.propertyManager.tenant.TenantLinker;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
@RequestMapping("tenant")
public class TenantController {

	@Autowired
	protected TenantService tenantService;

	public TenantController() {
		// TODO Auto-generated constructor stub
	}

	@RequestMapping(value = "{tenantID}", method = RequestMethod.GET)
	public @ResponseBody Tenant getTenant(@PathVariable("tenantID") Long id,
			HttpServletResponse response) {
		Tenant t = tenantService.getTenant(id);
		if (t == null) {
			response.setStatus(HttpServletResponse.SC_NOT_FOUND);
		}
		return t;
	}

	@RequestMapping(value = "{tenantID}", method = RequestMethod.DELETE)
	public @ResponseBody Tenant removeTenant(@PathVariable("tenantID") Long id,
			HttpServletResponse response) {
		Tenant t = tenantService.remove(id);
		if (t == null) {
			response.setStatus(HttpServletResponse.SC_NOT_FOUND);
		}
		return t;
	}

	@RequestMapping(method = RequestMethod.GET)
	public @ResponseBody Iterable<TenantLinker> discover() {
		return tenantService.tenants();
	}

	@RequestMapping(method = RequestMethod.GET, params = { "tenantName" })
	public @ResponseBody Iterable<TenantLinker> search(
			@RequestParam("tenantName") String keyword) {
		return tenantService.find(keyword);
	}

	@RequestMapping(method = RequestMethod.POST)
	public @ResponseBody Tenant addTenant(@Valid @RequestBody Tenant toAdd,
			Errors error, HttpServletResponse response) {
		if (error.hasErrors()) {
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
			return null;
		}
		return tenantService.addTenant(toAdd);
	}

	@RequestMapping(value = "{tenantID}", method = RequestMethod.PUT)
	public Tenant updateTenant(@PathVariable("tenantID") Long id,
			@ReqeustBody Tenant update, Errors error,
			HttpServletResponse response) {

	}
}
